// <auto-generated />
using System;
using Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241008084429_Baseline")]
    partial class Baseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Aggregates.NodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NodeSelector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NodeEntity", (string)null);
                });

            modelBuilder.Entity("Domain.Aggregates.PodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PodSelector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PodEntity", (string)null);
                });

            modelBuilder.Entity("Domain.ValueObjects.Metrics", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "label");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Label");

                    b.ToTable("Metrics");

                    b.HasDiscriminator<string>("MetricType").HasValue("Metrics");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.ValueObjects.NodeMetrics", b =>
                {
                    b.HasBaseType("Domain.ValueObjects.Metrics");

                    b.Property<double>("CpuTotal")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "cpuTotal");

                    b.Property<double>("MemoryTotal")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "memoryTotal");

                    b.Property<Guid?>("NodeId")
                        .HasColumnType("uuid");

                    b.HasIndex("NodeId");

                    b.HasDiscriminator().HasValue("Node");
                });

            modelBuilder.Entity("Domain.ValueObjects.PodMetrics", b =>
                {
                    b.HasBaseType("Domain.ValueObjects.Metrics");

                    b.Property<double>("CpuUsage")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "cpuUsage");

                    b.Property<double>("MemoryUsage")
                        .HasColumnType("double precision")
                        .HasAnnotation("Relational:JsonPropertyName", "memoryUsage");

                    b.Property<Guid?>("PodId")
                        .HasColumnType("uuid");

                    b.HasIndex("PodId");

                    b.HasDiscriminator().HasValue("Pod");
                });

            modelBuilder.Entity("Domain.ValueObjects.NodeMetrics", b =>
                {
                    b.HasOne("Domain.Aggregates.NodeEntity", null)
                        .WithMany("Metrics")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.ValueObjects.PodMetrics", b =>
                {
                    b.HasOne("Domain.Aggregates.PodEntity", null)
                        .WithMany("Metrics")
                        .HasForeignKey("PodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Aggregates.NodeEntity", b =>
                {
                    b.Navigation("Metrics");
                });

            modelBuilder.Entity("Domain.Aggregates.PodEntity", b =>
                {
                    b.Navigation("Metrics");
                });
#pragma warning restore 612, 618
        }
    }
}
